diff -ur fnord-1.10-orig/httpd.c fnord-1.10/httpd.c
--- fnord-1.10-orig/httpd.c	2006-10-01 14:28:24.000000000 -0300
+++ fnord-1.10/httpd.c	2006-10-01 14:28:35.000000000 -0300
@@ -259,7 +259,7 @@
 }
 
 #ifdef CGI
-#define CGIENVLEN 21
+#define CGIENVLEN 23
 
 static const char *cgivars[CGIENVLEN] = {
   "GATEWAY_INTERFACE=",
@@ -282,7 +282,9 @@
   "CONTENT_LENGTH=",
   "QUERY_STRING=",
   "PATH_INFO=",
-  "PATH_TRANSLATED="
+  "PATH_TRANSLATED=",
+  "SCRIPT_FILENAME=",
+  "REDIRECT_STATUS="
 };
 
 static int iscgivar(const char *s) {
@@ -421,6 +423,16 @@
     tmp+=realpath(pathinfo,tmp)?str_len(tmp):str_copy(tmp,pathinfo);
     ++tmp;
   }
+  else {
+    cgi_env[++i]=tmp;
+    tmp+=str_copy(tmp,"SCRIPT_FILENAME=");
+    tmp+=str_copy(tmp,url+1+str_rchr(url,'/'));
+    *tmp=0; ++tmp;
+    cgi_env[++i]=tmp;
+    tmp+=str_copy(tmp,"REDIRECT_STATUS=");
+    tmp+=str_copy(tmp,"");
+    ++tmp;
+  }
 
   {
     unsigned int j=0;
@@ -1077,6 +1089,9 @@
 static int findcgi(const char* c) {
   return (c[0]=='.' && c[1]=='c' &&
 	  c[2]=='g' && c[3]=='i' &&
+          (c[4]=='/' || c[4]==0)) ||
+         (c[0]=='.' && c[1]=='p' &&
+	  c[2]=='h' && c[3]=='p' &&
 	  (c[4]=='/' || c[4]==0));
 }
 #endif
@@ -1675,3 +1690,17 @@
   }
   return 1;
 }
+
+
+unsigned long str_rchr(const char *haystack, char needle) {
+  register const char* t=haystack;
+  register const char c=needle;
+  register const char* found=0;
+  for (;;) {
+    if (!*t) break; if (*t==c) found=t; ++t;
+    if (!*t) break; if (*t==c) found=t; ++t;
+    if (!*t) break; if (*t==c) found=t; ++t;
+    if (!*t) break; if (*t==c) found=t; ++t;
+  }
+  return (found?found:t)-haystack;
+}
diff -ur fnord-1.10-orig/str.h fnord-1.10/str.h
--- fnord-1.10-orig/str.h	2006-10-01 14:28:24.000000000 -0300
+++ fnord-1.10/str.h	2006-10-01 14:29:08.000000000 -0300
@@ -32,7 +32,8 @@
 extern unsigned int str_chr(const char *haystack,char needle) __pure__;
 
 /* str_rchr returns the index of the last occurance of needle or \0 in haystack */
-extern unsigned int str_rchr(const char *haystack,char needle) __pure__;
+//extern unsigned int str_rchr(const char *haystack,char needle) __pure__;
+unsigned long str_rchr(const char *haystack, char needle);
 
 /* str_start returns 1 if the b is a prefix of a, 0 otherwise */
 extern int str_start(const char *a,const char *b) __pure__;
